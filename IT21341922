//IT21341922 Hashini Herath
//Declaration of " Booking " class
class Booking
{
private:
	char Booking_ID[10];
	char Booking_Time[10];
	char Booking_Date[10];

	Payment* payments[SIZE];

public:
	Booking();
	Booking(const char ID[], const char Time[], const char Date[]);
	void addPaymentDetails(Payment* payments[]);
	void getBooking_ID();
	~Booking();
};


//Implementation of "Booking" class

#include "Booking.h"
#include "Payment.h"

Booking::Booking()
{
	strcpy_s(Booking_ID, "");
	strcpy_s(Booking_Time, "");
	strcpy_s(Booking_Date, "");
}

Booking::Booking(const char ID[], const char Time[], const char Date[])
{
	strcpy_s(Booking_ID, ID);
	strcpy_s(Booking_Time, Time);
	strcpy_s(Booking_Date, Date);
}

void Booking::addPaymentDetails(Payment* payments[])
{
}

void Booking::getBooking_ID()
{
}

Booking::~Booking()
{
	cout << "Booking deleted" << endl;
	for (int i = 0; i < SIZE; i++) {
		delete payments[i];
	}

}

//Declaration of " Vehicle " class
class Vehicle
{
private:
	char Vehicle_ID[10];
	char Vehicle_Brand[30];
	char Vehiccle_Type[30];
	char Vehicle_Color[30];
	int Vehicle_SeatCount;
	int VEhicle_Rate;

	Booking* bookings[SIZE];
	Driver* drivers[SIZE];
public:
	Vehicle();
	Vehicle(const char ID[], const char Brand[], const char Type[], const char Color[], int sCount, int Rate);
	void addBookingDetails(Booking* bookings[]);
	void addDriverDetails(Driver* drivers[]);
	void addVehicle();
	void removeVehicle();
	void restockVehicle();
	~Vehicle();
};

//Implementation of "Vehicle" class

#include "Vehicle.h"
#include "Driver.h"
#include "Booking.h"

Vehicle::Vehicle()
{
	strcpy_s(Vehicle_ID, "");
	strcpy_s(Vehicle_Brand, "");
	strcpy_s(Vehiccle_Type, "");
	strcpy_s(Vehicle_Color, "");
	Vehicle_SeatCount = 0;
	VEhicle_Rate = 0;
}

Vehicle::Vehicle(const char ID[], const char Brand[], const char Type[], const char Color[], int sCount, int Rate)
{
	strcpy_s(Vehicle_ID, ID);
	strcpy_s(Vehicle_Brand, Brand);
	strcpy_s(Vehiccle_Type, Type);
	strcpy_s(Vehicle_Color, Color);
	Vehicle_SeatCount = sCount;
	VEhicle_Rate = Rate;
}

void Vehicle::addBookingDetails(Booking* bookings[])
{
}

void Vehicle::addDriverDetails(Driver* drivers[])
{
}

void Vehicle::addVehicle()
{
}

void Vehicle::removeVehicle()
{
}

void Vehicle::restockVehicle()
{
}

Vehicle::~Vehicle()
{
	cout << "Vehicle delete" << endl;
	for (int i = 0; i < SIZE; i++) {
		delete bookings[i];
		delete drivers[i];
	}
}







